<%@ page language="java" contentType="text/html;charset=UTF-8"%>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<%@ taglib uri="http://www.springframework.org/tags" prefix="spring" %>
<html>
<head>
  <!-- 设定页面使用的字符集 -->
  <meta http-equiv="Content-Type" content="text/html;charset=GBK"/>
  <!-- 用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从Cache中再调出 -->
  <meta http-equiv="pragma" content="no-cache"/>
  <!-- 清除缓存 -->
  <meta http-equiv="cache-control" content="no-cache"/>
  <!-- 设定网页的到期时间 -->
  <meta http-equiv="expires" content="0"/>

  <script type="text/javascript" src="<%=request.getContextPath()%>/res/vue/vue.global.js"></script>
  <script type="text/javascript" src="<%=request.getContextPath()%>/res/vue/axios.min.js"></script>
  
  <!-- 右侧内容样式 -->
  <link rel="stylesheet" href="<%=request.getContextPath()%>/res/style/content.css"/>
  <!-- 引入样式 -->
  <link rel="stylesheet" href="<%=request.getContextPath()%>/res/element-plus/lib/theme-chalk/index.css"/>
  <!-- 引入组件库 -->
  <script src="<%=request.getContextPath()%>/res/element-plus/lib/index.full.js"></script>

  <style type="text/css">
    body {
      margin-left: 0px;
      margin-top: 0px;
      margin-right: 0px;
      margin-bottom: 0px;
      overflow-y:auto;
      overflow-x: hidden;
    }
    .el-breadcrumb {
      font-size: 12pt;
      line-height: 1;
      padding: 10px;
    }
    .el-divider--horizontal {
      margin: 0px;
    }
    [v-cloak]{
      display: none !important;
    }
  </style>
</head>

<body>
  <!-- 隐藏域，用于获取后端通过HttpServletRequest request传递到前端的值 -->
  <input type="hidden" id="url_list_obj" value="${url_list_obj }" />
  <input type="hidden" id="url_get_obj" value="${url_get_obj }" />
  <input type="hidden" id="url_save_obj" value="${url_save_obj }" />
  <input type="hidden" id="url_del_obj" value="${url_del_obj }" />
  <input type="hidden" id="url_to_excel" value="${url_to_excel }" />
  <input type="hidden" id="user_token" value="${user_token }" />
  <input type="hidden" id="group_name" value="${group_name }" />
  <input type="hidden" id="obj_name" value="${obj_name }" />

<div id="app" v-cloak>
  <!-- 以下为列表页面 -->
  <div v-if="isList">
    <el-breadcrumb separator="/">
      <el-breadcrumb-item>首页</el-breadcrumb-item>
      <el-breadcrumb-item>{{groupName}}</el-breadcrumb-item>
      <el-breadcrumb-item>{{objName}}管理</el-breadcrumb-item>
    </el-breadcrumb>
    
    <el-divider></el-divider>
    
    <span style="text-align:center;display:block;font-size:18pt;padding:10px;">{{objName}}列表</span>
    
    <div class="black-space-10"></div>
    <div class="flex-wrap j-s a-c">
      <div class="flex a-c padding-left10">
        <el-button @click="addClick" type="text" >
          <span class="text-10">新增</span>
        </el-button>
        <span> | </span>
        <el-button @click="excelClick" type="text">
          <span class="text-10">导出Excel</span>
        </el-button>
      </div>
      <div class="flex a-c">
        <div class="flex a-c padding-right10">
         	 种类：
          <el-select v-model="queryInfo.type" placeholder="请选择">
            <el-option v-for="item in selectData" :key="item.workId" :label="item.workType" :value="item.workId">
            <span style="float: left">{{ item.workType }}</span>
            </el-option>
          </el-select>
        </div>
        <div class="flex a-c padding-right10">
         	 日期：
          <el-date-picker v-model="times" :clearable="false" type="daterange" range-separator="至" start-placeholder="开始日期" end-placeholder="结束日期">
          </el-date-picker>
        </div>
        <div class="flex a-c padding-right10">
       	   关键字：
          <el-input placeholder="请输入内容" v-model="queryInfo.keyWord" style="width: 350px"></el-input>
        </div>
        <div class="flex a-c padding-right10">
          <el-button @click="getObjList()" type="primary" icon="el-icon-search">搜索</el-button>
        </div>
      </div>
    </div>

    <div class="margin-20">
      <el-table :data="tableData" border class="table-auto" max-height="850">
        <el-table-column prop="userId" label="用户id" class="table-column-width-180"></el-table-column>
        <el-table-column prop="loginName" label="登录名称" class="table-column-width-180"></el-table-column>
        <el-table-column prop="userName" label="用户名" class="table-column-width-180"></el-table-column>
        <el-table-column prop="fullName" label="用户全名" class="table-column-width-180"></el-table-column>
        <el-table-column prop="loginPass" label="登录密码" class="table-column-width-180"></el-table-column>
        <el-table-column prop="userType" label="用户类型" class="table-column-width-180"></el-table-column>
        <el-table-column prop="createTime" label="时间" class="table-column-width-180"></el-table-column>
        <el-table-column prop="personId" label="人员id" class="table-column-width-180"></el-table-column>
        <el-table-column prop="memo" label="备注" class="table-column-width-180"></el-table-column>
        <el-table-column prop="jsonInfo" label="个性化参数" class="table-column-width-180"></el-table-column>
        <el-table-column prop="delInfo" label="删除标记" class="table-column-width-180"></el-table-column>
        <el-table-column fixed="right" label="操作" fixed="right" width="130">
          <template #default="scope">
            <el-button @click="handleClick(scope.row.userId)" type="text" size="small">查看</el-button>
            <span> | </span>
            <el-button @click="editClick(scope.row.userId)" type="text" size="small">编辑</el-button>
            <span> | </span>
            <el-button @click="delClick(scope.row.userId)" type="text" size="small">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
      <div class="black-space-20"></div>
      <el-pagination :total="page.recNum" :page-size="page.itemPerPage" :pager-count="11"
          layout="prev, pager, next" background class="float-right margin-bottom10">
      </el-pagination>
    </div>
  </div>

  <!-- 以下为form表单 -->
  <div v-if="isEdit">
    <el-breadcrumb separator="/">
      <el-breadcrumb-item>首页</el-breadcrumb-item>
      <el-breadcrumb-item>{{groupName}}</el-breadcrumb-item>
      <el-breadcrumb-item>{{objName}}管理</el-breadcrumb-item>
      <el-breadcrumb-item>{{actInfo}}{{objName}}</el-breadcrumb-item>
    </el-breadcrumb>
    <el-divider></el-divider>
    <span style="text-align:center;display:block;font-size:18pt;padding:10px;">{{actInfo}}{{objName}}</span>
    
    <div style="margin:20px">
      <div class="flex j-c">
        <el-form label-position="right" label-width="100px" :model="formData" style="width:500px;">
          <el-form-item label="用户id：">
            <el-input v-model="formData.userId"></el-input>
          </el-form-item>

          <el-form-item label="登录名称：">
            <el-input v-model="formData.loginName"></el-input>
          </el-form-item>

          <el-form-item label="用户名：">
            <el-input v-model="formData.userName"></el-input>
          </el-form-item>

          <el-form-item label="用户全名：">
            <el-input v-model="formData.fullName"></el-input>
          </el-form-item>

          <el-form-item label="登录密码：">
            <el-input v-model="formData.loginPass"></el-input>
          </el-form-item>

          <el-form-item label="用户类型：">
            <el-input v-model="formData.userType"></el-input>
          </el-form-item>

          <el-form-item label="人员id：">
            <el-input v-model="formData.personId"></el-input>
          </el-form-item>

          <el-form-item label="备注：">
            <el-input v-model="formData.memo"></el-input>
          </el-form-item>

          <el-form-item label="个性化参数：">
            <el-input v-model="formData.jsonInfo"></el-input>
          </el-form-item>

          <el-form-item label="删除标记：">
            <el-input v-model="formData.delInfo"></el-input>
          </el-form-item>

          <el-form-item label="时间：">
            <el-date-picker v-model="formData.createTime" type="date" placeholder="选择日期"></el-date-picker>
          </el-form-item>

          <el-button type="success" @click="saveClick" style="margin-left:100px;">确定</el-button>
          <el-button type="info" @click="cancelClick" style="margin-left:50px;">取消</el-button>
        </el-form>
      </div>
    </div>
  </div>

</div>
</body>

<script>
const main_app = {
  setup() {
    actInfo = Vue.ref('新增')
    isList = Vue.ref(true)
    isEdit = Vue.ref(false)
    isResult = Vue.ref(false)
    queryInfo = Vue.ref('')

    const pageData = Vue.reactive({
      // form表单，建立一个响应式对象
      formData:{
        userId: 0,
        loginName: '',
        userName: '',
        fullName: '',
        loginPass: '',
        memo: '',
        createTime:'',
      },
      times: [],

      queryInfo:{
    	  type: 0,
    	  startDate: '',
          endDate: '',
          // times:[],
    	  keyWord: '',
      },
      //下拉条数据列表
      selectData:[],
      // 列表数据
      tableData:[],
      // 分页数据
      page: {
        // 总页数
        pageNum: 0,
        // 记录总数
        recNum: 0,
        // 当前页
        currPage: 0,
        // 每页记录数
        itemPerPage: 30,
      },
      // 令牌
      token: '',
      
      // 分组名称
      groupName: '',
      
      // 对象名称
      objName: '',
      
      // 对象列表url
      urlObjList: '',
      
      // 获取对象url
      urlObjGet: '',
      
      // 保存对象url
      urlObjSave: '',
      
      // 删除对象url
      urlObjDel: '',
      
      // 导出excel文件url
      urlObjExcel: '',
    })
    const data = Vue.toRefs(pageData)

    // 显示列表
    function showList() {
      isEdit.value = false;
      isList.value = true;
      isResult.value = false;
    }

    // 显示form表单
    function showForm() {
      isEdit.value = true;
      isList.value = false;
      isResult.value = false;
    }

    // 显示操作结果
    function showResult() {
      isEdit.value = false;
      isList.value = false;
      isResult.value = true;
    }

    // 调用接口获取对象列表
    async function getObjList() {
      console.log(pageData.times);
      pageData.queryInfo.startDate = pageData.times[0];
      pageData.queryInfo.endDate = pageData.times[1];
      console.log(pageData.queryInfo);

      const {data:res} = await axios({
        url: '<%=request.getContextPath()%>' + pageData.urlObjList,
        method: 'POST',
        // 自定义请求头
        headers: {'user_token': pageData.token},
        // url参数
        params: {
          query: pageData.queryInfo,
        },
      })
      if (res.status === 1) {
        pageData.tableData = res.data;
      }
    }
    
    // 点击取消按钮
    function cancelClick() {
      showList();
      getObjList();
    }

    // 查看对象
    function handleClick(objId) {
      console.log(objId);
    }

    // 新增对象
    function addClick() {
      actInfo.value = '新增';

      pageData.formData.userId = 0;
      pageData.formData.loginName = "";
      pageData.formData.userName = "";
      pageData.formData.fullName = "";
      pageData.formData.loginPass = "";
      pageData.formData.createTime = "";
      pageData.formData.userType = 0;
      pageData.formData.personId = 0;
      pageData.formData.memo = "";
      pageData.formData.jsonInfo = "";
      pageData.formData.delInfo = 0;
      
      // 改变组件显示状态到编辑页面
      showForm();
    }

    // 保存对象信息
    async function saveClick() {
      const that = this;
      const {data:res} = await axios({
        url: '<%=request.getContextPath()%>' + pageData.urlObjSave,
        method: 'POST',
        // 自定义请求头
        headers: {'user_token': pageData.token},
        data: pageData.formData,
      })
      const msg = res.message;
      //状态码正确执行相关操作
      if (res.status === 1) {
        that.ElementPlus.ElMessage.success(msg);
        showList();
        getObjList();
      } else {
        //添加失败操作信息
        that.ElementPlus.ElMessage.error(msg);
      }
    }

    // 编辑对象
    async function editClick(objId) {
      actInfo.value = '修改';

      const that = this;
      const {data:res} = await axios({
        url: '<%=request.getContextPath()%>' + pageData.urlObjGet + '/' + objId,
        method: 'POST',
        // 自定义请求头
        headers: {'user_token': pageData.token},
      })
      const msg = res.message;
      //状态码正确执行相关操作
      if (res.status === 1) {
        pageData.formData = res.data;
        showForm();
        getObjList();
      } else {
        that.$message.error(msg);
      }
    }

    // 删除对象
    function delClick(objId) {
      const that = this;
      that.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then( async () => {
        const {data:res} = await axios({
          url: '<%=request.getContextPath()%>' + pageData.urlObjDel + '/' + objId,
          method: 'POST',
          // 自定义请求头
          headers: {'user_token': pageData.token},
        })
        const msg = res.message;
        //状态码正确执行相关操作
        if (res.status === 1) {
          that.$message.success(msg);
          showList();
          getObjList();
        } else {
          that.$message.error(msg);
        }
      }).catch(() => {
        that.$message({
          type: 'info',
          message: '已取消删除'
        });
      });
    }

    // 模糊查询
    async function selectClick() {
      pageData.queryInfo.startDate = pageData.times[0];
      pageData.queryInfo.endDate = pageData.times[1];
      console.log(pageData.queryInfo);
      getObjList();
      <%--const {data:res} = await axios({--%>
      <%--  url: '<%=request.getContextPath()%>/auth/authUserInfo/authUserInfoList',--%>
      <%--  method: 'POST',--%>
      <%--  // 自定义请求头--%>
      <%--  headers: {'user_token': pageData.token},--%>
      <%--  // url参数--%>
      <%--  params: {--%>
      <%--    query: pageData.queryInfo,--%>
      <%--  }--%>
      <%--})--%>
      <%--if (res.status === 1) {--%>
      <%--  pageData.tableData = res.data;--%>
      <%--}--%>
    }
    
    //获取下拉菜单列表
    async function getSelectDataList() {
      const {data:res} = await axios({
        url: '<%=request.getContextPath()%>/auth/getlist/entry',
        method: 'POST',
      })
      console.log(res.data)
      if (res.status === 0) {
        pageData.selectData = res.data;
      }
		}

    // 导出对象列表到excel
    async function excelClick() {
      console.log('pageData.token:[' + pageData.token + ']');
    window.location.replace('<%=request.getContextPath()%>' + pageData.urlObjExcel + '/' + pageData.token);
    }

    // 组件构建完成后，加载初始化数据
    Vue.onMounted(() => {
      // console.log('------------->onMounted');
      pageData.urlObjList = document.getElementById('url_list_obj').value;
      pageData.urlObjGet = document.getElementById('url_get_obj').value;
      pageData.urlObjSave = document.getElementById('url_save_obj').value;
      pageData.urlObjDel = document.getElementById('url_del_obj').value;
      pageData.urlObjExcel = document.getElementById('url_to_excel').value;
       
      pageData.groupName = document.getElementById('group_name').value;
      pageData.objName = document.getElementById('obj_name').value;
      pageData.token = document.getElementById('user_token').value;
        
      getObjList();
      getSelectDataList();
      // console.log('------------->onMounted-----------end');
    });

    // 组件销毁前，执行的收尾工作
    Vue.onBeforeUnmount(() => {
      console.log('------------->onBeforeUnmount');
      //....
    });

    return {
      ...data,showList,showForm,showResult,
      actInfo,getObjList,isEdit,isList,isResult,
      addClick,editClick,delClick,handleClick,saveClick,excelClick,cancelClick,selectClick,
      
      getSelectDataList,
    }
  }
};
const app = Vue.createApp(main_app).use(ElementPlus);
// ......其它需要加载的模板数据
app.mount('#app');

</script>
</html>

